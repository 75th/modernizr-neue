<!doctype html>
<html lang="en" class="builder no-js">
  <head>
    {{!-- we style the download page different is javascript isn't running. in
    order to prevent a flash of those styles, change the class right away --}}
    <script>(function(D){D.className=D.className.replace(/\bno-js\b/,'js')})(document.documentElement)</script>
    {{> partials/head 'Modernizr Download Builder'}}
    <link  rel="stylesheet" href="/css/builder.css" />
  </head>

  <body>
    {{> partials/header activeClass="download"}}
    <main role="main" id="main">{{{builderContent}}}</main>
    {{> partials/footer}}
    <script src="/js/build.js"></script>
    <script>
     {{!-- inject all of the detect metadata onto the page, rather than force
      the client to download it after the initial render --}}
      window._modernizrMetadata={{{metadata}}};
     {{! same thing for the options }}
      window._options={{{options}}};

     {{! provide the correct paths for the modernizr builder}}
      window._modernizrConfig = {
        metadataUrl: '/js/modernizr-metadata.json',
        packageUrl: '/lib/modernizr/package.json',
        baseUrl: '/lib/modernizr/src',
        paths: {
          text: '/lib/requirejs-plugins/lib/text',
          lib: '/lib/modernizr/lib',
          json: '/lib/requirejs-plugins/src/json',
          lodash: '/js/lodash.custom.js',
          test: '/lib/modernizr/feature-detects'
        }
      }
    </script>
    {{#each scripts}}
    {{!-- in prod, we want combined scripts, in dev we want each one loosly for
    easier debugging. To reuse the template in both situations, inject the scripts
    as a handlebars var--}}
      <script src="{{this}}"></script>
    {{/each}}
  </body>
</html>
